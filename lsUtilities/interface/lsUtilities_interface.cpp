/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"
#include "s3eDevice.h"


#include "lsUtilities.h"


#ifndef S3E_EXT_SKIP_LOADER_CALL_LOCK
// For MIPs (and WP8) platform we do not have asm code for stack switching
// implemented. So we make LoaderCallStart call manually to set GlobalLock
#if defined __mips || defined S3E_ANDROID_X86 || (defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP))
#define LOADER_CALL_LOCK
#endif
#endif

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef       void(*lsUtilIOSPreventBackup_t)(const char * file);
typedef       void(*lsUtilInstallExceptionHandler_t)();
typedef       void(*lsUtilUninstallExceptionHandler_t)();
typedef lsDeviceClass(*lsUtilGetDeviceClassInt_t)();
typedef const char *(*lsUtilGetDeviceClassString_t)();
typedef       void(*lsDeviceSetTabletThreshold_t)(int threshold);
typedef lsDeviceStorage*(*lsUtilGetDeviceStorageInformation_t)();

/**
 * struct that gets filled in by lsUtilitiesRegister
 */
typedef struct lsUtilitiesFuncs
{
    lsUtilIOSPreventBackup_t m_lsUtilIOSPreventBackup;
    lsUtilInstallExceptionHandler_t m_lsUtilInstallExceptionHandler;
    lsUtilUninstallExceptionHandler_t m_lsUtilUninstallExceptionHandler;
    lsUtilGetDeviceClassInt_t m_lsUtilGetDeviceClassInt;
    lsUtilGetDeviceClassString_t m_lsUtilGetDeviceClassString;
    lsDeviceSetTabletThreshold_t m_lsDeviceSetTabletThreshold;
    lsUtilGetDeviceStorageInformation_t m_lsUtilGetDeviceStorageInformation;
} lsUtilitiesFuncs;

static lsUtilitiesFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0xe03710a0, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE,                 "error loading extension: lsUtilities");

        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0xe03710a0, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool lsUtilitiesAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

void lsUtilIOSPreventBackup(const char * file)
{
    IwTrace(LSUTILITIES_VERBOSE, ("calling lsUtilities[0] func: lsUtilIOSPreventBackup"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_lsUtilIOSPreventBackup(file);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void lsUtilInstallExceptionHandler()
{
    IwTrace(LSUTILITIES_VERBOSE, ("calling lsUtilities[1] func: lsUtilInstallExceptionHandler"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_lsUtilInstallExceptionHandler();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void lsUtilUninstallExceptionHandler()
{
    IwTrace(LSUTILITIES_VERBOSE, ("calling lsUtilities[2] func: lsUtilUninstallExceptionHandler"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_lsUtilUninstallExceptionHandler();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

lsDeviceClass lsUtilGetDeviceClassInt()
{
    IwTrace(LSUTILITIES_VERBOSE, ("calling lsUtilities[3] func: lsUtilGetDeviceClassInt"));

    if (!_extLoad())
        return eGeneric;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    lsDeviceClass ret = g_Ext.m_lsUtilGetDeviceClassInt();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

const char * lsUtilGetDeviceClassString()
{
    IwTrace(LSUTILITIES_VERBOSE, ("calling lsUtilities[4] func: lsUtilGetDeviceClassString"));

    if (!_extLoad())
        return "generic";

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    const char * ret = g_Ext.m_lsUtilGetDeviceClassString();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void lsDeviceSetTabletThreshold(int threshold)
{
    IwTrace(LSUTILITIES_VERBOSE, ("calling lsUtilities[5] func: lsDeviceSetTabletThreshold"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_lsDeviceSetTabletThreshold(threshold);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

lsDeviceStorage* lsUtilGetDeviceStorageInformation()
{
    IwTrace(LSUTILITIES_VERBOSE, ("calling lsUtilities[6] func: lsUtilGetDeviceStorageInformation"));

    if (!_extLoad())
        return NULL;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    lsDeviceStorage* ret = g_Ext.m_lsUtilGetDeviceStorageInformation();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}
