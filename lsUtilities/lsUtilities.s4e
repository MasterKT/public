include:

/*---------------------------------------------------------------------------------
  lsUtilities v0.2
-----------------------------------------------------------------------------------

  Extension includes functionality provided by users for platforms supported by
  Marmalade. This extension is open source.


  Changelog

	0.2 Functionality added for distinquishing smartphones and tablets
	0.2		lsUtilGetDeviceClassInt() added for iOS, Windows and Android
	0.2		lsUtilGetDeviceClassString() added for iOS, Windows and Android
	0.2		IsDeviceSetTabletThreshold(int threshold)  added for Android
				Android: Has API for detecting DPI which other platforms do not, distinctions are made 
				based off these value.

				iOS: Asks the OS if it is an iPad or not.
				Windows: Always returns generic or eGeneric

	0.2 lsUtilGetDeviceStorageInformation() added for Android

	---------------------------------------------------------------------------------

	0.1 lsUtilInstallExceptionHandler , lsUtilUnInstallExceptionHandler added for IOS and Winddows
	0.1 lsUtilIOSPreventBackup added for IOS to prevent IOS from adding files to Cloud Storage 5.0.1 or highier

*/

#include <s3eTypes.h>

#include "s3eFile.h"
#include "lsDeviceStorage.h"

#define IOS_PREVENT_BACKUP(file) \
	char ___str___[255]; \
	s3eFileGetFileString(file, S3E_FILE_REAL_PATH, ___str___, 255);\
	lsUtilIOSPreventBackup(___str___);

enum lsDeviceClass
{
  eUnknown = 0, // extension will never return this, developer has an error in their application
  eGeneric = 1,
  eSmartphone = 2,
  eTablet = 3,
};

functions:

/*---------------------------------------------------------------------------------

	lsUtilIOSPreventBackup 
	Platforms: iOS
	Brief: Prevent iOS 5.1 or highier from using cloud storage on a file to back it up
	param1: Absolute file path to the file
	
	Note: Recommend not using IOS_PREVENT_BACKUP macro 
---------------------------------------------------------------------------------*/

void lsUtilIOSPreventBackup(const char * file) run_on_os_thread


/*---------------------------------------------------------------------------------

	lsUtilInstallExceptionHandler 
	Platforms: Windows, IOS
	
	Brief:	Attempts to register handlers to catch exception that would otherwise
			crash the application
			
	SIGABRT	(Signal Abort) Abnormal termination, such as is initiated by the abort function.
	SIGFPE	(Signal Floating-Point Exception) Erroneous arithmetic operation, such as zero divide 
			or an operation resulting in overflow (not necessarily with a floating-point operation).
	SIGILL	(Signal Illegal Instruction) Invalid function image, such as an illegal instruction. 
			This is generally due to a corruption in the code or to an attempt to execute data.
	SIGINT	(Signal Interrupt) Interactive attention signal. Generally generated by the application user.
	SIGSEGV	(Signal Segmentation Violation) Invalid access to storage: When a program tries to read or write
			outside the memory it has allocated.
	SIGTERM	(Signal Terminate) Termination request sent to program.
	
---------------------------------------------------------------------------------*/

void lsUtilInstallExceptionHandler() run_on_os_thread

void lsUtilUninstallExceptionHandler() run_on_os_thread



/*---------------------------------------------------------------------------------

	lsUtilGetDeviceClassInt
	Platforms: Android, IOS
	Brief: 
	Return: 
---------------------------------------------------------------------------------*/

lsDeviceClass lsUtilGetDeviceClassInt() eGeneric run_on_os_thread


/*---------------------------------------------------------------------------------

	lsUtilGetDeviceClassString
	Platforms: Android, IOS
	Brief: see also IsDeviceSetTabletThreshold
	Return: 
---------------------------------------------------------------------------------*/

const char * lsUtilGetDeviceClassString() "generic" run_on_os_thread




/*---------------------------------------------------------------------------------

	lsUtilSetTabletThreshold(int threshold)
	Platforms: Android Only
	Brief: lsUtilGetDeviceClassString requires a threshold for what ratio quantifies a tablet from a 
			smartphone. This value is the dpi width / dpi height ) default value set is
			461 = Samsung Galaxy Tablet X
	param1: integer representing android DPI width / DPI height

	
---------------------------------------------------------------------------------*/


void lsDeviceSetTabletThreshold(int threshold)  run_on_os_thread



/*---------------------------------------------------------------------------------

	lsUtilGetDeviceStorageInformation()
	Platforms: Android, IOS
	Brief: 
	Return: 
---------------------------------------------------------------------------------*/

lsDeviceStorage* lsUtilGetDeviceStorageInformation() NULL run_on_os_thread

