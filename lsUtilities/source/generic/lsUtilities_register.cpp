/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "lsUtilities_autodefs.h"
#include "s3eEdk.h"
#include "lsUtilities.h"
//Declarations of Init and Term functions
extern s3eResult lsUtilitiesInit();
extern void lsUtilitiesTerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static void lsUtilIOSPreventBackup_wrap(const char * file)
{
    IwTrace(LSUTILITIES_VERBOSE, ("calling lsUtilities func on main thread: lsUtilIOSPreventBackup"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)lsUtilIOSPreventBackup, 1, file);
}

static void lsUtilInstallExceptionHandler_wrap()
{
    IwTrace(LSUTILITIES_VERBOSE, ("calling lsUtilities func on main thread: lsUtilInstallExceptionHandler"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)lsUtilInstallExceptionHandler, 0);
}

static void lsUtilUninstallExceptionHandler_wrap()
{
    IwTrace(LSUTILITIES_VERBOSE, ("calling lsUtilities func on main thread: lsUtilUninstallExceptionHandler"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)lsUtilUninstallExceptionHandler, 0);
}

static lsDeviceClass lsUtilGetDeviceClassInt_wrap()
{
    IwTrace(LSUTILITIES_VERBOSE, ("calling lsUtilities func on main thread: lsUtilGetDeviceClassInt"));
    return (lsDeviceClass)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)lsUtilGetDeviceClassInt, 0);
}

static const char * lsUtilGetDeviceClassString_wrap()
{
    IwTrace(LSUTILITIES_VERBOSE, ("calling lsUtilities func on main thread: lsUtilGetDeviceClassString"));
    return (const char *)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)lsUtilGetDeviceClassString, 0);
}

static void lsDeviceSetTabletThreshold_wrap(int threshold)
{
    IwTrace(LSUTILITIES_VERBOSE, ("calling lsUtilities func on main thread: lsDeviceSetTabletThreshold"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)lsDeviceSetTabletThreshold, 1, threshold);
}

static lsDeviceStorage* lsUtilGetDeviceStorageInformation_wrap()
{
    IwTrace(LSUTILITIES_VERBOSE, ("calling lsUtilities func on main thread: lsUtilGetDeviceStorageInformation"));
    return (lsDeviceStorage*)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)lsUtilGetDeviceStorageInformation, 0);
}

#define lsUtilIOSPreventBackup lsUtilIOSPreventBackup_wrap
#define lsUtilInstallExceptionHandler lsUtilInstallExceptionHandler_wrap
#define lsUtilUninstallExceptionHandler lsUtilUninstallExceptionHandler_wrap
#define lsUtilGetDeviceClassInt lsUtilGetDeviceClassInt_wrap
#define lsUtilGetDeviceClassString lsUtilGetDeviceClassString_wrap
#define lsDeviceSetTabletThreshold lsDeviceSetTabletThreshold_wrap
#define lsUtilGetDeviceStorageInformation lsUtilGetDeviceStorageInformation_wrap

#endif

void lsUtilitiesRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[7];
    funcPtrs[0] = (void*)lsUtilIOSPreventBackup;
    funcPtrs[1] = (void*)lsUtilInstallExceptionHandler;
    funcPtrs[2] = (void*)lsUtilUninstallExceptionHandler;
    funcPtrs[3] = (void*)lsUtilGetDeviceClassInt;
    funcPtrs[4] = (void*)lsUtilGetDeviceClassString;
    funcPtrs[5] = (void*)lsDeviceSetTabletThreshold;
    funcPtrs[6] = (void*)lsUtilGetDeviceStorageInformation;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[7] = { 0 };

    /*
     * Register the extension
     */
    s3eEdkRegister("lsUtilities", funcPtrs, sizeof(funcPtrs), flags, lsUtilitiesInit, lsUtilitiesTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int lsUtilitiesStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&lsUtilitiesRegisterExt;
    return 0;
}

int g_lsUtilitiesVal = lsUtilitiesStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    lsUtilitiesRegisterExt();
}
#endif

#endif
